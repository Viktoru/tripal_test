<?php
  /**
   * Class Tripal_test_jobs
   * Administration test for the Tripal_test_jobs module.
   * $vu
   * @ingroup tripal_jobs_api
   */

  class Tripal_test_jobs extends DrupalWebTestCase {
    protected $privileged_user;
	/**
	 * Implements DrupalWebTestCase::getInfo
	 */
	public static function getInfo() {
	  return array(
		'name' => 'Tripal test jobs',
		'description' => 'Tests the functionality of the Tripal jobs STATUS AND ACTION',
		'group' => 'tripal_test',
	  );
	}
	/**
	 * Immpleents DrupalWebTestCase::tearDown().
	 */
	public function tearDown() {
	  // We need to remove the FK constraints on the tables before tearing
	  // them down or we get errors.
	  $result = db_query("ALTER TABLE {tripal_custom_tables} DROP CONSTRAINT tripal_custom_tables_fk1 CASCADE");
	  $this->assertTrue($result, "The constraint, tripal_custom_tables_fk1, could not be dropped");

	  // Now call the parent tearDown() function.
	  parent::tearDown();
	}
	/**
	 * Immpleents DrupalWebTestCase::setUp().
	 */
	public function setUp() {
	  // TODO: Change the autogenerated stub
	  // Enable module or modules.
	  return parent::setUp('tripal_core');
	}
	/**
	 * Functional test for te tripal_jobs_report() function.
	 *
	 * This function simply provides and HTML output that lists the jobs
	 * that are in the job queue.  The list is paged.
	 */
	public function test_tripal_jobs_report() {
      // Case #1:  Make sure the return value is HTML
	  $jreport = tripal_jobs_report();
	  $this->assertTrue($jreport != '', 'tripal_jobs_report() should return HTML', 'Other');
	}
	/**
	 * Funtional test for the tripal_is_job_running() function.
	 *
	 * This funtio requires that jobs are added and started in order to test.
	 */
	public function test_tripal_is_job_running() {

	  // Is there a job running? If a job is running then it is TRUE and should return 1.
	  // If a job is not running then it is FALSE and should return 0.
	  // If a job doesn't return True or False or 0 or 1 then it will display an error.
	  $is_job_running = tripal_is_job_running();
	  $a = ($is_job_running);
	  if($a == false){
		$this->assertFalse($is_job_running, 'Tripal job is not running. Should return FALSE or 0', 'Other');
	} elseif($a == true) {
		$this->assertTrue($is_job_running, 'Tripal job is running. Should return TRUE or 1', 'Other');
	  } else {
	    $this->verbose('If a job does not return True or False or 0 or 1 then it will display an error.');
	  }
	}
	  /**
	 * Function test for the tripal_add_jobs() API Function.
	 */
	public function test_tripal_add_job(){
	  global $user;
	  // Case #1:  submit a job successfully and receive a job id.
	  $args = array();
	  $job_id = tripal_add_job('Test Job Case #1', 'tripal_test_jobs', 'tripal_test_jobs_callback', $args, $user->uid, 10);
	  $this->assertTrue(is_numeric($job_id), 'tripal_add_job() should return a numeric job ID.', 'Other');
	  // Case #2:  was the job actually added to the database table.
	  $intdate = strtotime("now");
//	  $intDate = 1485386152;
//	  $inDate = date("Y-m-d H:i:s", $intDate); // return a date form not a int

	  $dbcall = db_query("SELECT submit_date, status FROM tripal_jobs WHERE status='Completed' AND submit_date = $intdate ")->fetchField();
	    if ($dbcall == true) {
		$job_id = tripal_add_job('Test Job Case #2', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 10);
		$this->assertTrue($job_id, 'The last job was added to the database', 'Other');
		} else {
		$job_id = tripal_add_job('Test Job Case #3', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 10);
		$this->assertFalse($job_id, 'The last job was no added to the database', 'Other');
	  	}

	  // Case #3:  what if the job name isn't provided. The function
	  // should return FALSE instead of a job id.
	  $job_id = tripal_add_job('', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 10);
	  $this->assertFalse(!$job_id, 'tripal_add_job() should return FALSE if the name is not provided', 'Other');

	  // Case #4:  what if an empty callback is provided. The function
	  // should return FALSE if no calllback is provided.
	  $job_id = tripal_add_job('Test Job Case #4', 'modulename', '', $args, $user->uid, 10);
	  $this->assertFalse($job_id, 'Tripal_add_job() should return FALSE if no callback is provided');

	  // Case #5:  what if a callback is provided but it doesn't exist. The
	  // function should return FALSE.
	  $job_id = tripal_add_job('Test Job Case #5', 'modulename', 'tripal_test_jobs_callback2', $args, $user->uid, 10);
	  $this->assertFalse($job_id, 'If a callback is provided but it doesnt exist. It should return FALSE');


	  // Case #6:  What if no arguments are provided. It should return FALSE.
	  $job_id = tripal_add_job('Test Job Case #6', 'modulename', 'tripal_test_jobs_callback', '', $user->uid, 10);
	  $this->assertFalse($job_id, 'If an argument was not provided. It should return FALSE');

	  // Case #7:  What if no UID is provided. It should return FALSE.
	  $job_id = tripal_add_job('Test Job Case #7', 'modulename', 'tripal_test_jobs_callback', $args, $user, 10);
	  $this->assertFalse($job_id, 'If an UID is not provided. It should return FALSE');


	  // Case #8:  What if a priority greater than 10 is provided. It should
	  // return FALSE.
	  $job_id = tripal_add_job('Test Job Case #8', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 11);
	  $this->assertFalse($job_id, 'If a priority is grater than 10 it should return FALSE');

	  // Case #9:  What if a priority less than 1 is provided. It should
	  // return FALSE.
	  $job_id = tripal_add_job('Test Job Case #9', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 0);
	  $this->assertFalse($job_id, 'If a priority is less than 1 it should return FALSE');


	  // Case #10:  What if the priority is an alpha character instead of
	  // a number. It should return FALSE.
	  $job_id = tripal_add_job('Test Job Case #10', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 'a');
	  $this->assertFalse($job_id, 'If a priority is not numeric it should return FALSE');

	  // Case #11: what if the modulename is empty. It should return FALSE.
	  $job_id = tripal_add_job('Test Job Case #11', '', 'tripal_test_jobs_callback', $args, $user->uid, 10);
	  $this->assertFalse($job_id, 'If the modulename is empty it should return FALSE');

	}
	public function test_Tripal_get_active_jobs() {

	  // Case #1: What if a list of jobs associated with the given modulename return. It should return TRUE.
	  $job_id = tripal_get_active_jobs('Test Job Case #12', 'modulename');
	  $this->assertTrue($job_id, 'A list of jobs associated with the given modulename return.');

	  // Case #2: What if the modulename doesn't exist. It should return FALSE.
	  $job_id = tripal_get_active_jobs('Test Job Case #12', '');
	  $this->assertTrue($job_id, 'A list of jobs associated with the given modulename is not returning.');

	}
	public function test_tripal_cancel_job(){

	  // Case #1: What if a job is cancel currently when a job is in the queue. It should return FALSE.

	  // Case #2: What if the job is in progress or it has finished. It should return FALSE.

	  // Case #3: What if the job didn't cancel. It should return TRUE and redirect to tripal_jobs.
	  $job_id = tripal_cancel_job('Test Job Case #13', $redirect = TRUE);
	  $this->assertTrue($job_id, 'A job was not cancel. It should return TRUE');

	}


  }

