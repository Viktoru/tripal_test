<?php
  /**
   * Class Tripal_test_jobs
   * Administration test for the Tripal_test_jobs module.
   * @ingroup tripal_jobs_api
   */

class Tripal_test_jobs extends DrupalWebTestCase
{
		protected $privileged_user;
		/**
		 * Implements DrupalWebTestCase::getInfo
       */
      public static function getInfo()
      {
       return array(
        'name' => 'Tripal test jobs',
        'description' => 'Tests the functionality of the Tripal jobs STATUS AND ACTION',
		    'group' => 'tripal_test',
          );
      }
      /**
       * Immpleents DrupalWebTestCase::tearDown().
       */
      public function tearDown()
      {
      // We need to remove the FK constraints on the tables before tearing
      // them down or we get errors.
      $result = db_query("ALTER TABLE {tripal_custom_tables} DROP CONSTRAINT tripal_custom_tables_fk1 CASCADE");
      $this->assertTrue($result, "The constraint, tripal_custom_tables_fk1, could not be dropped");
      // Now call the parent tearDown() function.
      parent::tearDown();
      }
      /**
       * Immpleents DrupalWebTestCase::setUp().
       */
      public function setUp()
      {
      // TODO: Change the autogenerated stub
      // Enable module or modules.
      return parent::setUp('tripal_core');
      }
		/**
		 * Funtional test for the tripal_is_job_running() function.
		 * This funtio requires that jobs are added and started in order to test.
		 */
//		public function test_tripal_is_job_running()
//		{
//		// Case #1: If a job is running then it is TRUE and should return 1.
//		$is_job_running = tripal_is_job_running();
//		$this->assertTrue(is_numeric($is_job_running), 'Case #1: Tripal job is running. Should return TRUE or 1', 'Other');
//
//		// Case #2: If a job is not running then it is False and Should return 0.
//		$is_job_running = tripal_is_job_running();
//		$this->assertFalse(is_null($is_job_running), 'Case #2: Tripal job is not running. Should return FALSE or 0', 'Other');
//		}
//		public function test_tripal_add_job()
//		{
//		global $user;
//		// Case #3:  Submit a job successfully and receive a job id.
//		$args = array();
//		$job_id = tripal_add_job('Test Job Case #1', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 10);
//		$this->assertTrue(is_numeric($job_id), 'Case #3: It should return a numeric job ID.', 'Other');
//
//		// Case #4: Was the job actually added to the database table.
//		$job_id01 = tripal_add_job('Test Job Case #2', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 10);
//		$this->assertTrue(is_null($job_id01), 'Case #4: The last job was not added to the database', 'Other');
//
//		// Case #5: What if the job name isn't provided. The function
//	  // should return FALSE instead of a job id.
//		$job_id02 = tripal_add_job('', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 10);
//		$this->assertFalse(!$job_id02, 'Case #5: It should return FALSE if the name is not provided', 'Other');
//
//		// Case #6: A new job was added to the database table.
//		$intDate = strtotime("now"); // Test it with 1486489305
//		$db_sql = "SELECT job_id, submit_date FROM {tripal_jobs} WHERE submit_date = :submit_date";
//		$result = db_query($db_sql, array(':submit_date' => $intDate));
//		$job_date = $result->fetchObject();
//		$this->assertTrue(is_numeric($job_date), 'Case #6: A new job was added to the database', 'Other');
//		$this->assertFalse(is_null($job_date), 'Case #6: A new job was not added to the database', 'Other');
//
//		// Case #7: What if an empty callback is provided. The function
//	  // should return FALSE if no callback is provided.
//		$job_id03 = tripal_add_job('Test Job Case #7', 'modulename', '', $args, $user->uid, 10);
//	  $this->assertFalse($job_id03, 'Case #8: It should return FALSE if no callback is provided', 'Other');
//
//		// Case #8: What if a callback is provided but it doesn't exist.
//		// The function should return FALSE.
//		$job_id04 = tripal_add_job('Test Job Case #8', 'modulename', 'tripal_test_jobs_callback2', $args, $user->uid, 10);
//		$this->assertFalse($job_id04, 'Case #8: If a callback is provided but it doesnt exist. It should return FALSE', 'Other');
//
//	  // Case #9: What if no arguments are provided. It should return FALSE.
//	  $job_id05 = tripal_add_job('Test Job Case #9', 'modulename', 'tripal_test_jobs_callback', '', $user->uid, 10);
//	  $this->assertFalse($job_id05, 'Case #9: If an argument was not provided. It should return FALSE', 'Other');
//
//	  // Case #10:  What if no UID is provided. It should return FALSE.
//	  $job_id06 = tripal_add_job('Test Job Case #10', 'modulename', 'tripal_test_jobs_callback', $args, '', 10);
//	  $this->assertFalse($job_id06, 'Case #10: If an UID is not provided. It should return FALSE', 'Other');
//
//		// Case #11:  What if a priority greater than 10 is provided.
//	  // It should return FALSE.
//	  $job_id07 = tripal_add_job('Test Job Case #11', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 11);
//	  $this->assertFalse($job_id07, 'Case #11: If a priority is grater than 10 it should return FALSE', 'Other');
//
//	  // Case #12:  What if a priority less than 1 is provided.
//	  // It should return FALSE.
//	  $job_id08 = tripal_add_job('Test Job Case #12', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 0);
//	  $this->assertFalse($job_id08, 'Case #12: If a priority is less than 1 it should return FALSE', 'Other');
//
//		//Case #13:  What if the priority is an alpha character instead of
//		//a number. It should return FALSE.
//		$job_id09 = tripal_add_job('Test Job Case #13', 'modulename', 'tripal_test_jobs_callback', $args, $user->uid, 'asc123');
//		$this->assertFalse($job_id09, 'Case #13: If a priority is not numeric it should return FALSE', 'Other');
//
//		//Case #14: What if the modulename is empty. It should return FALSE.
//		$job_id10 = tripal_add_job('Test Job Case #14', '', 'tripal_test_jobs_callback', $args, $user->uid, 10);
//		$this->assertFalse($job_id10, 'Case #14: If the modulename is empty it should return FALSE', 'Other');
//		}
//
//		public function test_Tripal_get_active_jobs() {
//
//	  // Case #15: What if a list of jobs associated with the given modulename returns. It should return TRUE.
//	  $job_id11 = tripal_get_active_jobs('modulename');
//	  $this->assertTrue($job_id11, 'Case #15: A list of jobs associated with the given modulename returns.
//	  It should return TRUE.', 'Other');
//
//	  // Case #16: What if the modulename doesn't exist. It should return FALSE.
//	  $job_id12 = tripal_get_active_jobs('');
//	  $this->assertFalse($job_id12, 'Case #16: A list of jobs associated with the given modulename is not returning.
//	  It should return FALSE', 'Other');
//		}
//
//		public function test_tripal_get_job_submit_date() {
//
//		// Case #17: If a job date was added to the queue. It should return TRUE.
//		$job_id13 = tripal_get_job_submit_date('Test job date');
//		$this->assertTrue(format_date($job_id13), 'Case #17: A date job was added to the queue.
//	  It should return TRUE', 'Other');
//
//		// Case #18: If a job date was not added to the queue. It should return FALSE.
//		$job_id14 = tripal_get_job_submit_date('');
//		$this->assertFalse(format_date($job_id14), 'Case #18: A date job was not added to the queue.
//	  It should return FALSE', 'Other');
//		}
//
//		public function test_tripal_get_job_end(){
//
//		// Case #19: What if a job return the end-time for a given job.
//		$job_id15 = tripal_get_job_end('end');
//		$this->assertTrue(is_integer($job_id15), 'Case #19: If a job return the end time for a given job. It should return TRUE.', 'Other');
//
//		// Case #20: What if a job doesn't return the end-time for a given job.
//		$job_id16 = tripal_get_job_end('');
//		$this->assertFalse($job_id16, 'Case #20: If a job doesnt return the end-time for a given job. It should return FALSE.', 'Other');
//
//		}

		public function test_tripal_get_job(){

//		$job = db_query("SELECT * FROM {tripal_jobs}");
//		$rowCount = $job->rowCount();

		// Case #21: Retrieve information regarding a tripal job_id
		// $job_id17 = $rowCount;
		$job_id17 = tripal_get_job('job_id');
		$this->assertTrue($job_id17, 'Case #21: It should retrieve information regarding a tripal job.
		It should return TRUE.', 'Other');
		
//		$this->assertTrue(is_numeric($job_id17), 'Case #21: It should retrieve information regarding a tripal job.
//		It should return TRUE.', 'Other');
//
//		// Case #22: What if a tripal job_id information is not retrieving.
//		$job_id17 = $rowCount;
//		$this->assertFalse(empty($job_id17), 'Case #22: It should no retrieve information regarding a tripal job.
//		It should return FALSE.');
		}

		public function test_tripal_cancel_job(){

			// I'm getting a db error.
//		$job = db_query("SELECT * FROM {tripal_jobs} WHERE status='Completed' ");
//		$rowCountJob = $job->rowCount();

		// Case #24: What if the job didn't cancel. It should return TRUE.
//		$job_id18 = tripal_cancel_job(1, TRUE);
//		$this->assertNotNull($job_id18, 'Case #24: The url-link to cancel a job was successfully loaded. It should return TRUE.', 'Other');

//// Case #25: What if a job is canceled while it is currently in the queue. It should return FALSE.
//		$job_id19 = tripal_cancel_job(-1, TRUE');
//		$this->assertNull($job_id19, 'Case #25: If A job was not cancel, the current path is determined as destination.
//		It should return TRUE', 'Other');

		}

		public function test_tripal_get_job_start(){


//		// Case #26: What if a start time for a given job return.
//		$job_id20 = tripal_get_job_start('job');
//		$this->assertTrue($job_id20, 'Case #26: If a start time for a given job return.
//		It should return TRUE.');
//
//		// Case #27: What if a start time for a given job return.
//		$job_id21 = tripal_get_job_start('job');
//		$this->assertFalse($job_id21, 'Case #26: If a start time for a given job return nothing.
//		It should return FALSE.');

		}

		public function test_tripal_launch_job(){
//		// Case #27: What if a function used to manually launch all queued tripal jobs. It should return TRUE.
//		$job_id22 = tripal_launch_job([$do_parallel = 0], [$job_id= NULL]);
//		$this->assertTrue($job_id22, 'Case #27: It should return TRUE.');
//
//		// Case #28: What if a . It should return FALSE.
//		$job_id23 = tripal_launch_job([$do_parallel = 1], [$job_id= NULL]);
//		$this->assertFalse($job_id23, 'Case #28: It should return FALSE.');
		}

		public function test_tripal_rerun_job(){

				// I'm getting a db error.
//		// Case #29: Set a job to be re-ran. If the re run job is added, Drupal will redirect ot the jobs page.
//		$job_id24 = tripal_rerun_job('job_id', [$goto_jobs_page = TRUE]);
//		$this->assertTrue($job_id24, 'Case #29: Set a job to be re-ran. It should return TRUE.', 'Other');
//
//		// Case #30: Set a job to be re-ran. What is the goto_jobs_page is FALSE
//		$job_id25 = tripal_rerun_job('job_id', [$goto_jobs_page = FALSE]);
//		$this->assertFalse($job_id25, 'Case #30: What if the job to be re-ran return FALSE. It should return FALSE. Drupal will
//		not redirect to the jobs page.', 'Other');

		}

}
